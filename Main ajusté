
/*
Par: William Chung et Edouard Larouche

Ce programme gère la simulation de la diffusion thermique sur une plaque.
Il permet à l'utilisateur de charger des données à partir d'un fichier, de configurer
des paramètres comme le mode de voisinage, les valeurs d'epsilon et de coefficient,
et de simuler l'évolution de la température sur la plaque.

Le programme propose également plusieurs options interactives,
telles que la visualisation des variations de température et la mise à jour
de l'échelle de température en fonction des valeurs minimales et maximales.

Les opérations principales sont réalisées dans une boucle où l'utilisateur
peut naviguer à travers les options du menu et choisir différentes actions à exécuter.

*/
#include "affichages.h"

// Ouvrir le test unitaire dans le fichier plaque_lib.h

#if (MODE_TEST) 
int main(void) { 
	test_moyenne_voisins();
}

#else
int main() {
	int dimy = 0, dimx = 0, mode = 4, init = 0;
	double coeff = 0.5, mint, maxt, epsilon = 0.2, coefficient = EPSILON;
	t_matrice plaque;
	t_matbool pos_fixes;
	int iteration_n;
	const char* message1 = "Nouvelle valeur de epsilon?: ";
	const char* message2 = "Nouvelle valeur de coefficient?: ";

	unsigned char choix; // Variable pour stocker le choix de l'utilisateur
	do {
		choix = afficher_menu();

		switch (toupper(choix)) {
		case 'L': case '1': {
			FILE* fichier = lire_nom_fich();
			if (fichier) {
				lire_fichier(fichier, plaque, pos_fixes, &dimy, &dimx, &mint, &maxt);
				init = 1; // Indique que les données ont été chargées
				aff_options(mode, epsilon, coeff);
			}
			colorage_plaque(plaque, dimy, dimx, mint, maxt);
			dessiner_echelle(mint, maxt); // Appel de dessiner_echelle avec mint et maxt
			break;
		}
		case 'M': case '2': {
			mode = valider_mode_voisins(); // Choisir le mode
			aff_options(mode, epsilon, coeff);
			break;
		}
		case 'E': case '3': {
			epsilon = valider_reel(message1, MIN_EPS, MAX_EPS); // Changer epsilon
			aff_options(mode, epsilon, coeff);
			break;
		}
		case 'C': case '4': {
			coeff = valider_reel(message2, MIN_COEF, MAX_COEF); // Changer coefficient
			aff_options(mode, epsilon, coeff);
			break;
		}
		case 'V': case '5': {
			if (init) {
				pt_variation(plaque, pos_fixes, dimy, dimx, &mint, &maxt, 0); // Permet variation
			}
			else {
				printf("Veuillez d'abord charger les donnees.\n");
			}
			break;
		}
		case 'F': case '6': {
			if (init) {
				pt_variation(plaque, pos_fixes, dimy, dimx, &mint, &maxt, 1);
			}
			else {
				printf("Veuillez d'abord charger les donnees.\n");
			}
			break;
		}
		case 'S': case '7': {
			if (init) {
				/* Permet de faire la simulation ainsi que d'afficher
				la légende de couleur et le nombre d'itération*/

				iteration_n = simulation(plaque, pos_fixes, dimy, dimx, &mint, 
					&maxt, mode, epsilon, coeff);
				aff_nb_iter(iteration_n);
				dessiner_echelle(mint, maxt); /* Redessine l'échelle avec les nouvelles valeurs
				de mint et maxt après simulation*/
			}
			else {
				printf("Veuillez d'abord charger les donnees.\n");
			}
			break;
		}
		case 'Q': case '8': {
			printf("Quitter le programme.\n");
			break;
		}
		default:
			printf("Choix invalide. Essayez à nouveau.\n");
			break;
		}

		//Pour sortir du programme avec la selection 8
	} while (toupper(choix) != 'Q' && choix != '8'); 
	return 0;
}
#endif
