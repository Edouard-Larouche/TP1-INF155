#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <assert.h>
#include "WinConsole.h" // Librairie pour la gestion de l'écran et des couleurs

// Macro
#define FFLUSH() while(getchar() != '\n') {}  // Macro pour vider les scanf()

#define MAXLIG  40          // Dimension maximale de la plaque
#define MAXCOL  75
#define MAXTEMP 10000			  // La température absolue maximale permise
#define COL_DROITE 80
#define EPSILON 1.0
#define ESPACEMENT_COLONES 3 // Pour permettre une lecture plus facile
#define ESPACEMENT_RANGEES 3   // Pour permettre une lecture plus facile
#define NB_COUL  15 
const int COULEURS[NB_COUL] = { RED, LIGHTRED, MAGENTA, LIGHTMAGENTA, BLUE,
LIGHTBLUE, CYAN, LIGHTCYAN, GREEN, LIGHTGREEN, DARKGRAY, BROWN,
YELLOW, LIGHTGRAY, WHITE };

typedef double t_matrice[MAXLIG][MAXCOL];   // Type-tableau pour les 2 plaques
typedef int t_matbool[MAXLIG][MAXCOL];      // Type-tableau pour les positions fixes

FILE* lire_nom_fich();
void lire_fichier(FILE* fichier, t_matrice plaque, t_matbool pos_fixes, int* dimy, int* dimx, double* mint, double* maxt);
int calculer_nouv_plaque(const t_matrice plaque, t_matrice nouv_plaque, t_matbool p_fixes, int dimy, int dimx, int mode, double epsilon, double coeff);
double moyenne_voisins(const t_matrice plaque, int y, int x, int mode);
double copier_nouv_plaque(t_matrice plaque, const t_matrice nouv_plaque, int dimy, int dimx, double* mint, double* maxt);
int simulation(t_matrice plaque, t_matbool pos_fixes, int dimy, int dimx, double* mint, double* maxt, int mode, double epsilon, double coeff);
void colorage_plaque(const t_matrice plaque, int dimy, int dimx, double mint, double maxt);

int main() { // Utilisez int main() au lieu de void main()
    int dimy, dimx, mode = 4;
    double coeff = 0.5, mint, maxt;

    t_matrice plaque;
    t_matbool pos_fixes;

    textmode(55);

    // Variable pointeur-fichier
    FILE* fichier = lire_nom_fich();

    lire_fichier(fichier, plaque, pos_fixes, &dimy, &dimx, &mint, &maxt);
    simulation(plaque, pos_fixes, dimy, dimx, &mint, &maxt, mode, EPSILON, coeff);
    colorage_plaque(plaque, dimy, dimx, mint, maxt);

    fclose(fichier); // Fermez le fichier après utilisation
    return 0; 
}

FILE* lire_nom_fich() {
    FILE* ptr_de_fichier = NULL;
    char nom_saisi[40];
    int ligne_ecriture = 0;

    while (!ptr_de_fichier) {
        gotoxy(COL_DROITE, ++ligne_ecriture);
        printf("Entrez le nom du fichier a selectionner : ");
        gotoxy(COL_DROITE, ++ligne_ecriture);
        scanf("%s", nom_saisi);
        FFLUSH();

        ptr_de_fichier = fopen(nom_saisi, "r");
        if (!ptr_de_fichier) {
            gotoxy(COL_DROITE, ++ligne_ecriture);
            printf("OUPS... Ca ne marche pas !\n");
        }
    }
    gotoxy(COL_DROITE, ++ligne_ecriture);
    printf("Entree valide.\n");
    return ptr_de_fichier;
}

void lire_fichier(FILE* fichier, t_matrice plaque, t_matbool pos_fixes, int* dimy, int* dimx, double* mint, double* maxt) {
    // Lecture des dimensions de la matrice
    fscanf(fichier, "%d %d", dimy, dimx);

    // Initialisation des valeurs min et max
    *mint = MAXTEMP;  // Valeur arbitrairement grande pour min
    *maxt = -MAXTEMP; // Valeur arbitrairement petite pour max

    // Remplir la matrice avec les températures et calculer min et max
    for (int i = 0; i < *dimy; ++i) {
        for (int j = 0; j < *dimx; ++j) {
            fscanf(fichier, "%lf", &plaque[i][j]);

            // Mettre à jour les températures min et max
            if (plaque[i][j] < *mint) {
                *mint = plaque[i][j];
            }
            if (plaque[i][j] > *maxt) {
                *maxt = plaque[i][j];
            }

            // Fixer les bords de la matrice comme positions fixes
            if (i == 0 || i == (*dimy - 1) || j == 0 || j == (*dimx - 1)) {
                pos_fixes[i][j] = 1;
            }
            else {
                pos_fixes[i][j] = 0;
            }
        }
    }
}

double moyenne_voisins(const t_matrice plaque, int y, int x, int mode) {
    double somme = 0;
    int n = 0;

    if (mode == 4) {
        if (y > 0) {
            somme += plaque[y - 1][x];
            n++;
        }
        if (y < MAXLIG - 1) {
            somme += plaque[y + 1][x];
            n++;
        }
        if (x > 0) {
            somme += plaque[y][x - 1];
            n++;
        }
        if (x < MAXCOL - 1) {
            somme += plaque[y][x + 1];
            n++;
        }

        return (somme / n);
    }
    else if (mode == 8) {
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                if (!(i == 0 && j == 0)) {
                    if (y + i >= 0 && y + i < MAXLIG && x + j >= 0 && x + j < MAXCOL) {
                        somme += plaque[y + i][x + j];
                        n++;
                    }
                }
            }
        }
        return (somme / n);
    }
    return 0.0;
}

int calculer_nouv_plaque(const t_matrice plaque, t_matrice nouv_plaque,
    t_matbool pos_fixes, int dimy, int dimx, int mode, 
    double epsilon, double coeff) {

    int j;
    int i;

    int equilibre = 1;

    for (i = 0; i < dimy; ++i) {
        for (j = 0; j < dimx; ++j) {
            if (pos_fixes[i][j] == 0) {
                nouv_plaque[i][j] = (plaque[i][j] * coeff) + (moyenne_voisins(plaque, i, j, mode)) * (1.0 - coeff);
                // Si la différence dépasse epsilon
                if ((plaque[i][j] - nouv_plaque[i][j]) > epsilon) {
                    equilibre = 0;
                }
            }
            else {
                nouv_plaque[i][j] = plaque[i][j];
            }
        }
    }
    if (equilibre == 0) {
        return 0;
    }
    else {

    }
    return 1;
}

double copier_nouv_plaque(t_matrice plaque, const t_matrice nouv_plaque, int dimy, int dimx, double* mint, double* maxt) {
    double somme = 0.0;
    int i;
    int j;

    for ( i = 0; i < dimy; ++i) {
        for (j = 0; j < dimx; ++j) {
            plaque[i][j] = nouv_plaque[i][j];

            // Mettre à jour les températures min et max
            if (plaque[i][j] < *mint) {
                *mint = plaque[i][j];
            }
            if (plaque[i][j] > *maxt) {
                *maxt = plaque[i][j];
            }

            somme += plaque[i][j];
        }
    }
    return somme / (dimx * dimy);
}

int simulation(t_matrice plaque, t_matbool pos_fixes, int dimy, int dimx, double* mint, double* maxt, int mode, double epsilon, double coeff) {
    int iteration = 0;
    double moyenne;
    t_matrice nouv_plaque;
    int equilibre;

    do {
        equilibre = calculer_nouv_plaque(plaque, nouv_plaque, pos_fixes, dimy, dimx, mode, EPSILON, coeff);
        moyenne = copier_nouv_plaque(plaque, nouv_plaque,
            dimy, dimx, mint, maxt);

        for (int i = 0; i < dimy; ++i) {
            for (int j = 0; j < dimx; ++j) {
                gotoxy(j * ESPACEMENT_RANGEES,
                    i * ESPACEMENT_COLONES);
                printf("%lf", plaque[i][j]);
            }
        }
        printf("\nMax : %lf | Min : %lf | Moyenne : %lf\n", *maxt, *mint, moyenne);
        iteration++;
    } while (equilibre!=1);

    return iteration;
}

void colorage_plaque(const t_matrice plaque, int dimy, int dimx, double mint, double maxt) {
    double iteration = (maxt - mint) / NB_COUL;
    int i;
    int j;
    int n_couleur;

    for (i = 0; i < dimy; i++) {
        for (j = 0; j < dimx; j++) {
             n_couleur = ((plaque[i][j] - mint) / iteration);
            if (n_couleur >= NB_COUL) {
                n_couleur = NB_COUL - 1;  // Pour éviter le dépassement
            }
            textbackground(COULEURS[n_couleur]);
            printf("  "); // Imprime la couleur
        }
        printf("\n");
    }
    textbackground(COULEURS[BLACK]);
}

